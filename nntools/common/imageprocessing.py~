"""Functions for image processing
"""
# MIT License
# 
# Copyright (c) 2018 Yichun Shi
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import sys
import os
import math
import random
import numpy as np
from scipy import misc
import cv2
from matplotlib.colors import rgb_to_hsv


# Calulate the shape for creating new array given (h,w)
def get_new_shape(images, size=None, n=None):
    shape = list(images.shape)
    if size is not None:
        h, w = tuple(size)
        shape[1] = h
        shape[2] = w
    if n is not None:
        shape[0] = n
    shape = tuple(shape)
    return shape

def random_crop(images, size):
    n, _h, _w = images.shape[:3]
    h, w = tuple(size)
    shape_new = get_new_shape(images, size)
    assert (_h>=h and _w>=w)

    images_new = np.ndarray(shape_new, dtype=images.dtype)

    y = np.random.randint(low=0, high=_h-h+1, size=(n))
    x = np.random.randint(low=0, high=_w-w+1, size=(n))

    for i in range(n):
        images_new[i] = images[i, y[i]:y[i]+h, x[i]:x[i]+w]

    return images_new

def center_crop(images, size):
    n, _h, _w = images.shape[:3]
    h, w = tuple(size)
    assert (_h>=h and _w>=w)

    y = int(round(0.5 * (_h - h)))
    x = int(round(0.5 * (_w - w)))

    images_new = images[:, y:y+h, x:x+w]

    return images_new

def random_flip(images):
    images_new = images.copy()
    flips = np.random.rand(images_new.shape[0])>=0.5
    
    for i in range(images_new.shape[0]):
        if flips[i]:
            images_new[i] = np.fliplr(images[i])

    return images_new

def flip(images):
    images_new = images.copy()
    for i in range(images_new.shape[0]):
        images_new[i] = np.fliplr(images[i])

    return images_new

def resize(images, size):
    n, _h, _w = images.shape[:3]
    h, w = tuple(size)
    shape_new = get_new_shape(images, size)

    images_new = np.ndarray(shape_new, dtype=images.dtype)

    for i in range(n):
        images_new[i] = misc.imresize(images[i], (h,w))

    return images_new

def padding(images, padding):
    n, _h, _w = images.shape[:3]
    if len(padding) == 2:
        pad_t = pad_b = padding[0]
        pad_l = pad_r = padding[1]
    else:
        pad_t, pad_b, pad_l, pad_r = tuple(padding)
       
    size_new = (_h + pad_t + pad_b, _w + pad_l + pad_r)
    shape_new = get_new_shape(images, size_new)
    images_new = np.zeros(shape_new, dtype=images.dtype)
    images_new[:, pad_t:pad_t+_h, pad_l:pad_l+_w] = images

    return images_new

def standardize_images(images, standard):
    if standard=='mean_scale':
        mean = 127.5
        std = 128.0
    elif standard=='scale':
        mean = 0.0
        std = 255.0
    images_new = images.astype(np.float32)
    images_new = (images_new - mean) / std
    return images_new



def random_shift(images, max_ratio):
    n, _h, _w = images.shape[:3]
    pad_x = int(_w * max_ratio) + 1
    pad_y = int(_h * max_ratio) + 1
    images_temp = padding(images, (pad_y, pad_x))
    images_new = images.copy()

    shift_x = (_w * max_ratio * np.random.rand(n)).astype(np.int32)
    shift_y = (_h * max_ratio * np.random.rand(n)).astype(np.int32)

    for i in range(n):
        images_new[i] = images_temp[i, pad_y+shift_y[i]:pad_y+shift_y[i]+_h, 
                            pad_x+shift_x[i]:pad_x+shift_x[i]+_w]

    return images_new    
    
def random_rotate(images, max_degree):
    n, _h, _w = images.shape[:3]
    images_new = images.copy()
    
    degree = max_degree * np.random.rand(n)

    for i in range(n):
        M = cv2.getRotationMatrix2D((_w/2, _h/2), int(degree[i]), 1)
        images = [cv2.warpAffine(img, M, (_w, _h)) for img in images]

    return images_new


def random_blur(images, blur_type, max_size):
    n, _h, _w = images.shape[:3]
    images_new = images.copy()
    
    kernel_size = max_size * np.random.rand(n)
    
    for i in range(n):
        size = int(kernel_size[i])
        if size > 0:
            if blur_type == 'motion':
                kernel = np.zeros((size, size))
                kernel[int((size-1)/2), :] = np.ones(size)
                kernel = kernel / size
                img = cv2.filter2D(images[i], -1, kernel)
            elif blur_type == 'gaussian':
                size = size // 2 * 2 + 1
                img = cv2.GaussianBlur(images[i], (size,size), 0)
            else:
                raise ValueError('Unkown blur type: {}'.format(blur_type))
            images_new[i] = img

    return images_new
    
def random_noise(images, stddev, min_=-1.0, max_=1.0):

    noises = np.random.normal(0.0, stddev, images.shape)
    images_new = np.maximum(min_, np.minimum(max_, images + noises))
        
    return images_new

def random_downsample(images, min_ratio):
    n, _h, _w = images.shape[:3]
    images_new = images.copy()
    ratios = min_ratio + (1-min_ratio) * np.random.rand(n)

    for i in range(n):
        w = int(round(ratios[i] * _w))
        h = int(round(ratios[i] * _h))
        images_new[i,:h,:w] = misc.imresize(images[i], (h,w))
        images_new[i] = misc.imresize(images_new[i,:h,:w], (_h,_w))
        
    return images_new

def random_interpolate(images):
    _n, _h, _w = images.shape[:3]
    nd = images.ndim - 1
    assert _n % 2 == 0
    n = int(_n / 2)

    ratios = np.random.rand(n,*([1]*nd))
    images_left, images_right = (images[np.arange(n)*2], images[np.arange(n)*2+1])
    images_new = ratios * images_left + (1-ratios) * images_right
    images_new = images_new.astype(np.uint8)

    return images_new
    
def expand_flip(images):
    '''Flip each image in the array and insert it after the original image.'''
    _n, _h, _w = images.shape[:3]
    shape_new = get_new_shape(images, n=2*_n)
    images_new = np.stack([images, flip(images)], axis=1)
    images_new = images_new.reshape(shape_new)
    return images_new

def five_crop(images, size):
    _n, _h, _w = images.shape[:3]
    h, w = tuple(size)
    assert h <= _h and w <= _w

    shape_new = get_new_shape(images, size, n=5*_n)
    images_new = []
    images_new.append(images[:,:h,:w])
    images_new.append(images[:,:h,-w:])
    images_new.append(images[:,-h:,:w])
    images_new.append(images[:,-h:,-w:])
    images_new.append(center_crop(images, size))
    images_new = np.stack(images_new, axis=1).reshape(shape_new)
    return images_new

def ten_crop(images, size):
    _n, _h, _w = images.shape[:3]
    shape_new = get_new_shape(images, size, n=10*_n)
    images_ = five_crop(images, size)
    images_flip_ = five_crop(flip(images), size)
    images_new = np.stack([images_, images_flip_], axis=1)
    images_new = images_new.reshape(shape_new)
    return images_new

def random_distorted_crop(images, 
                    min_area,
                    max_aspect_ratio,
                    output_size):
    # 0. generate A (MIN_A 0.8), a within [0.8, 1.0]
    # 1. generate random square [h * a, w * a]
    # 2. generate random aspect ratio (MAX = 1.3)
    # 3. select location within image
    _n, _h, _w = images.shape[:3]
    h, w = tuple(output_size)
    shape_new = get_new_shape(images, output_size)

    alpha = np.random.rand(_n) * (1 - min_area) + min_area
    max_aspect = np.sqrt(max_aspect_ratio)
    min_aspect = 1./max_aspect
    aspect_ratio = np.random.rand(_n) * (max_aspect - min_aspect) + min_aspect
    aspect_ratio = np.minimum(np.maximum(aspect_ratio, alpha), 1./alpha)
   
    images_new = np.ndarray(shape_new)
    for i in range(_n):
        temp_h, temp_w = (_h * alpha[i], _w * alpha[i])
        temp_h_ar, temp_w_ar = (int(temp_h * aspect_ratio[i]), int(temp_w / aspect_ratio[i]))
        x = int(np.random.rand() * (_w - temp_w_ar))
        y = int(np.random.rand() * (_h - temp_h_ar))
        images_new[i] = misc.imresize(images[i, y:y+temp_h_ar, x:x+temp_w_ar]
, output_size)
    return images_new

register = {
    'resize': resize,
    'padding': padding,
    'random_crop': random_crop,
    'center_crop': center_crop,
    'random_flip': random_flip,
    'standardize': standardize_images,
    'random_shift': random_shift,
    'random_interpolate': random_interpolate,
    'random_rotate': random_rotate,
    'random_blur': random_blur,
    'random_noise': random_noise,
    'random_downsample': random_downsample,
    'expand_flip': expand_flip,
    'five_crop': five_crop,
    'ten_crop': ten_crop,
    'random_distorted_crop': random_distorted_crop
}

def resize_and_remove_bg(im, size, eyes_only=False):
    non_black_pixels = np.any(im > [10,10,10], axis=-1)
    min_x = np.min(np.where(non_black_pixels)[0])
    min_y = np.min(np.where(non_black_pixels)[1])
    max_x = np.max(np.where(non_black_pixels)[0])
    max_y = np.max(np.where(non_black_pixels)[1])
    cropped = im[min_x:max_x, min_y:max_y]
    cropped = misc.imresize(cropped, size=size)
    if eyes_only:
        x,y,_ = cropped.shape
        max_x = x
        max_y = int(np.round(y * 0.50))
        cropped = cropped[0:max_y, 0:max_x]
        return misc.imresize(cropped, size=size)
    else:
        return cropped

def load_files(images, config, is_training=False):
    image_list = []
    for image_path in images:
        image = misc.imread(image_path, mode='RGB')
        image_list.append(image)
    return np.array(images_list)

def preprocess(images, config, is_training=False):
    # Load images first if they are file paths
    if type(images[0]) == str:
        image_paths = images
        images = []
        assert (config.channels==1 or config.channels==3)
        mode = 'RGB' if config.channels==3 else 'I'
        for image_path in image_paths:
            image = misc.imread(image_path, mode=mode)
            if not is_training:
                image = misc.imresize(image, size=config.image_size)
            if config.image_mode == 'hsv':
                image = rgb_to_hsv(image/255.)*255.
            images.append(image)
        images = np.stack(images, axis=0)
    else:
        print('YOOOOOOOOOOOOOOOOOOOOOOO!!!!!!!!!!!!!!')
        image_paths = images
        final_images = []
        for i in range(3):
            images = []
            mode = 'RGB' if config.channels==3 else 'I'
            for image_path in np.array(image_paths)[:, i]:
                image = misc.imread(image_path, mode=mode)
                images.append(resize_and_remove_bg(image, size=config.image_size, eyes_only=config.eyes_only))
            images = np.stack(images, axis=0)

            # Process images
            proc_funcs = config.preprocess_train if is_training else config.preprocess_test

            for proc in proc_funcs:
                proc_name, proc_args = proc[0], proc[1:]
                assert proc_name in register, \
                    "Not a registered preprocessing function: {}".format(proc_name)
                images = register[proc_name](images, *proc_args)
            if len(images.shape) == 3:
                images = images[:,:,:,None]
            final_images.append(images)
        final_images = np.stack((final_images[0], final_images[1], final_images[2]), axis=1)
        return final_images
        
    # Process images
    proc_funcs = config.preprocess_train if is_training else config.preprocess_test

    for proc in proc_funcs:
        proc_name, proc_args = proc[0], proc[1:]
        assert proc_name in register, \
            "Not a registered preprocessing function: {}".format(proc_name)
        images = register[proc_name](images, *proc_args)
    if len(images.shape) == 3:
        images = images[:,:,:,None]
    return images
        

